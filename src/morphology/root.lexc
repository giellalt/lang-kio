! Divvun & Giellatekno - open source grammars for Kiowa language
! Copyright © 2015 The University of Tromsø & the Norwegian Sámi Parliament
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@uit.no or feedback@divvun.no

! ========================================================================== !
! !!            !!!Kiowa morphological analyser                      !
! ========================================================================== !
!! INTRODUCTION TO MORPHOLOGICAL ANALYSER OF Kiowa LANGUAGE.
 

Multichar_Symbols  !!≈ !!!Definitions for @CODE@

!! !!Analysis symbols
!  ----------------
!! The morphological analyses of wordforms for the Kiowa
!! language are presented in this system in terms of the following symbols.
!! (It is highly suggested to follow existing standards when adding new tags).


!! POS

+N	        !!= * @CODE@
+V	        !!= * @CODE@
+Prop	        !!= * @CODE@
+Adv        !!= * @CODE@
+CC	        !!= * @CODE@
+CS	        !!= * @CODE@
+Interj     !!= * @CODE@
+Pron       !!= * @CODE@
+Num        !!= * @CODE@
+Arab        !!= * @CODE@
+Rom        !!= * @CODE@
+PUNCT      !!= * @CODE@ = punctuation symbols
+LEFT       !!= * @CODE@ = the left part of a paired punctuation symbol
+RIGHT      !!= * @CODE@ = the right part of a paired punctuation symbol
+CLB        !!= * @CODE@ = clause boundary symbols
+Symbol     !!≈ * @CODE@ = independent symbols in the text stream, like £, €, ©

+Loc        !!= * @CODE@ Locative
+Obv

+Dim     !!= * @CODE@ Diminutive

+Ipc		!!=  * @CODE@ Indeclinable Particle

+Dem        !!= * @CODE@ Demonstrative
+Def	    !!= * @CODE@ This is the intransitive demonstrative, i.e. the definite.
+Prox	    !!= * @CODE@ Demonstrative Proximate
+Med	    !!= * @CODE@ Demonstrative Medial
+Dist	    !!= * @CODE@ Demonstrative Distal
+QDL

+Foc	    !!= * @CODE@ Focus particle

!! Verbal MSP
+Prs  !!= * @CODE@
+Fut  !!= * @CODE@
+Prt  !!= * @CODE@
+Prf  !!= * @CODE@
+Cnj  !!= * @CODE@
+Int  !!= * @CODE@ This tag is for the Future Intentional
+Def  !!= * @CODE@ This tag is for the Future Definite

+Ind  !!= * @CODE@ Indicative, aka Independent
+Imp  !!= * @CODE@ Imperative, consider deleting +Imp tag
+Del  !!= * @CODE@ Delayed imperative
+Imm  !!= * @CODE@ Immediate imperative, consider deleting +Imp tag
+Sbj  !!= * @CODE@ Subjunctive, aka Conjunct mode, ê-
+Cond !!= * @CODE@ TODO: Should Future Conditional be tagget Fut only? Conor: we will split the Future tags




+1Sg    !!= * @CODE@ first singular
+2Sg    !!= * @CODE@ etc
+2Sg/Pl   !!= * @CODE@ Used in the syncretic 2sg/pl -> 1pl in the VTA paradigms
+3Sg    !!= * @CODE@

+1Pl    !!= * @CODE@ 1Pl is exclusive plural (I, them, not you)
+2Pl    !!= * @CODE@
+3Pl    !!= * @CODE@
+12Pl   !!= * @CODE@ 12Pl is inclusive plural (I, you, ...)
+4Sg    !!= * @CODE@ Fourth Person inanimate singlar (used only in the VII paradigms)
+4Pl    !!= * @CODE@ Fourth Person inanimate plural (used only in the VII paradigms)
+4Sg/Pl    !!= * @CODE@
+5Sg/Pl    !!= * @CODE@

+1SgO   !!= * @CODE@ objective conjugation
+2SgO   !!= * @CODE@
+2Sg/PlO   !!= * @CODE@ Used in the syncretic 2sg/pl -> 1pl in the VTA paradigms
+3SgO   !!= * @CODE@
+SgO    !!= * @CODE@
+1PlO   !!= * @CODE@
+2PlO   !!= * @CODE@
+3PlO   !!= * @CODE@
+PlO    !!= * @CODE@
+4Sg/PlO !!= * @CODE@ ambiguous 4th person (both Singular and Plural)
+5Sg/PlO !!= * @CODE@ ambiguous 5th person (both Singular and Plural)
+X !!= * @CODE@ Unspecified actor forms Okimāsis p. 118


!! Nominal MSP
+Sg		 !!= * @CODE@ singular
+Pl		 !!= * @CODE@ plural

+Px1Sg	 !!= * @CODE@ person prefixes for nouns
+Px2Sg	 !!= * @CODE@
+Px3Sg	 !!= * @CODE@
+Px4Sg	 !!= * @CODE@
+Px1Pl	 !!= * @CODE@ obviative
+Px12Pl	 !!= * @CODE@ inclusive
+Px2Pl	 !!= * @CODE@
+Px3Pl	 !!= * @CODE@
+Px4Pl	 !!= * @CODE@
+Der/Dim !!= * @CODE@ diminutive derivation

RdplW+ !!= * @CODE@ Reduplication Type 1 (Weak)
RdplS+ !!= * @CODE@ Reduplication Type 2 (Strong)

+Der/Com !!= * @CODE@ Comitative circumfix (wîci-...-m)
+Der/X !!= * @CODE@ VTI x-actor to VII-1

!! Verb conjugation (transitivity + animacy classes)
+AI      !!= * @CODE@ intransitive with animate subject,
+II      !!= * @CODE@ intransitive with inanimate subject,
+TA      !!= * @CODE@ transitive with animate object, and
+TI      !!= * @CODE@ transitive with inanimate object.

!! Noun animacy and dependency classes
+A		 !!= * @CODE@ animate noun
+I		 !!= * @CODE@ inanimate noun
+D		 !!= * @CODE@ dependent noun

+Incl    !!= * @CODE@ me too, etc.
+Qst     !!= * @CODE@ yes-no question particle ci

!! The Usage extents are marked using following tags:
 +Err/Orth   
 +Use/-Spell 



!! !!Flag diacritics


@U.person.1Sg@    !!= | @CODE@ | IV person tags
@U.person.2Sg@    !!= | @CODE@ | IV person tags
@U.person.3Sg@    !!= | @CODE@ | IV person tags
@U.person.4Sg@    !!= | @CODE@ | IV person tags
@U.person.1Du@    !!= | @CODE@ | IV person tags
@U.person.2Du@    !!= | @CODE@ | IV person tags
@U.person.3Du@    !!= | @CODE@ | IV person tags
@U.person.4Du@    !!= | @CODE@ | IV person tags
@U.person.1Pl@    !!= | @CODE@ | IV person tags
@U.person.2Pl@    !!= | @CODE@ | IV person tags
@U.person.3Pl@    !!= | @CODE@ | IV person tags
@U.person.4Pl@    !!= | @CODE@ | IV person tags


@U.person.1SgOSg@    !!= | @CODE@ | TV person flags
@U.person.1SgODu@    !!= | @CODE@ | TV person flags
@U.person.1SgOPl@    !!= | @CODE@ | TV person flags
@U.person.1SgOIn@    !!= | @CODE@ | TV person flags

@U.person.2SgOSg@    !!= | @CODE@ | TV person flags
@U.person.2SgODu@    !!= | @CODE@ | TV person flags
@U.person.2SgOPl@    !!= | @CODE@ | TV person flags
@U.person.2SgOIn@    !!= | @CODE@ | TV person flags

@U.person.3SgOSg@    !!= | @CODE@ | TV person flags
@U.person.3SgODu@    !!= | @CODE@ | TV person flags
@U.person.3SgOPl@    !!= | @CODE@ | TV person flags
@U.person.3SgOIn@    !!= | @CODE@ | TV person flags

@U.person.1DuOSg@    !!= | @CODE@ | TV person flags
@U.person.1DuODu@    !!= | @CODE@ | TV person flags
@U.person.1DuOPl@    !!= | @CODE@ | TV person flags

@U.person.2DuOSg@    !!= | @CODE@ | TV person flags
@U.person.2DuODu@    !!= | @CODE@ | TV person flags
@U.person.2DuOPl@    !!= | @CODE@ | TV person flags
@U.person.2DuOIn@    !!= | @CODE@ | TV person flags

@U.person.3DuOSg@    !!= | @CODE@ | TV person flags
@U.person.3DuODu@    !!= | @CODE@ | TV person flags
@U.person.3DuOPl@    !!= | @CODE@ | TV person flags
@U.person.3DuOIn@    !!= | @CODE@ | TV person flags

@U.person.2PlOSg@    !!= | @CODE@ | TV person flags
@U.person.2PlODu@    !!= | @CODE@ | TV person flags
@U.person.2PlOPl@    !!= | @CODE@ | TV person flags
@U.person.2PlOIn@    !!= | @CODE@ | TV person flags

@U.person.3PlOSg@    !!= | @CODE@ | TV person flags
@U.person.3PlODu@    !!= | @CODE@ | TV person flags
@U.person.3PlOPl@    !!= | @CODE@ | TV person flags

@U.person.4PlOSg@    !!= | @CODE@ | TV person flags
@U.person.4PlODu@    !!= | @CODE@ | TV person flags
@U.person.4PlOPl@    !!= | @CODE@ | TV person flags


!! !crk flags
!! We have manually optimised the structure of our lexicon using following
!! flag diacritics to restrict morhpological combinatorics - only allow compounds
!! with verbs if the verb is further derived into a noun again:
 @P.NeedNoun.ON@    !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
 @D.NeedNoun.ON@    !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
 @C.NeedNoun@       !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
!! 
!! For languages that allow compounding, the following flag diacritics are needed
!! to control position-based compounding restrictions for nominals. Their use is
!! handled automatically if combined with +CmpN/xxx tags. If not used, they will
!! do no harm.
 @P.CmpFrst.FALSE@ !!≈ | @CODE@ | Require that words tagged as such only appear first
 @D.CmpPref.TRUE@  !!≈ | @CODE@ | Block such words from entering ENDLEX
 @P.CmpPref.FALSE@ !!≈ | @CODE@ | Block these words from making further compounds
 @D.CmpLast.TRUE@  !!≈ | @CODE@ | Block such words from entering R
 @D.CmpNone.TRUE@  !!≈ | @CODE@ | Combines with the next tag to prohibit compounding
 @U.CmpNone.FALSE@ !!≈ | @CODE@ | Combines with the prev tag to prohibit compounding
 @P.CmpOnly.TRUE@  !!≈ | @CODE@ | Sets a flag to indicate that the word has passed R
 @D.CmpOnly.FALSE@ !!≈ | @CODE@ | Disallow words coming directly from root.

!! Use the following flag diacritics to control downcasing of derived proper
!! nouns (e.g. Finnish Pariisi -> pariisilainen). See e.g. North Sámi for how to use
!! these flags. There exists a ready-made regex that will do the actual down-casing
!! given the proper use of these flags.
 @U.Cap.Obl@        !!≈ | @CODE@ | Allowing downcasing of derived names: deatnulasj.
 @U.Cap.Opt@        !!≈ | @CODE@ | Allowing downcasing of derived names: deatnulasj.

LEXICON Root
!! The word forms in Kiowa language start from the lexeme roots of basic
!! word classes, or optionally from prefixes:
   Nouns ;
   Intransitive_Verb_prefixes ;
   Transitive_Verb_prefixes ;
   Pronouns ;
   Numerals ;
    Punctuation ;
    Symbols     ;

! vim: set ft=xfst-lexc:
